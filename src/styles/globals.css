@tailwind base;
@tailwind components;
@tailwind utilities;

.neu {
  background: linear-gradient(145deg, #f0f0f0, #cacaca);
  box-shadow: 25px 25px 49px #bebebe, -25px -25px 49px #ffffff;
}

.text-flag-bgImage {
  background-image: url("/assets/flag1.png");
  background-size: cover;
  background-position-y: center;
  background-position-x: -9px;
}

.rainbow-border:before,
.rainbow-border:after {
  content: "";
  position: absolute;
  left: -2px;
  top: -2px;
  background: linear-gradient(
    45deg,
    #fb0094,
    #0000ff,
    #00ff00,
    #ffff00,
    #ff0000,
    #fb0094,
    #0000ff,
    #00ff00,
    #ffff00,
    #ff0000
  );
  border-radius: 10px;
  background-size: 400%;
  width: calc(100% + 4px);
  height: calc(100% + 4px);
  z-index: -1;
  animation: small 0s ease-in-out forwards, steam 20s linear infinite alternate;
}

@keyframes small {
  0% {
    scale: 0;
  }
  80% {
    scale: 1.03;
  }
  100% {
    scale: 1;
  }
}

@keyframes steam {
  0% {
    background-position: 0 0;
  }
  50% {
    background-position: 400% 0;
  }
  100% {
    background-position: 0 0;
  }
}

.rainbow-border:after {
  filter: blur(50px);
}

.fancy-border {
  border-image-source: url("/assets/border6.png");
  border-image-slice: 87 81 87 81;
  border-image-width: 20px 20px 20px 20px;
  border-image-repeat: round round;
}

.magic-star {
  --size: clamp(20px, 1.5vw, 30px);
  animation: size-pulse 700ms ease forwards;
  display: block;
  height: var(--size);
  left: var(--star-left);
  position: absolute;
  top: var(--star-top);
  width: var(--size);
}

.magic-star > svg {
  animation: rotation 1000ms linear infinite;
  display: block;
  opacity: 0.7;
}

@keyframes size-pulse {
  from,
  to {
    transform: scale(0);
  }

  50% {
    transform: scale(1);
  }
}

@keyframes rotation {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(180deg);
  }
}

/* CSS CODE BELOW is only used for number-increment-animate.tsx */

@property --num {
  syntax: "<integer>";
  initial-value: 0;
  inherits: false;
}

@keyframes counter {
  0% {
    --num: var(--start-value);
  }
  to {
    --num: var(--end-value);
  }
}

.counter {
  animation: counter 2s steps(120, start) forwards;
  counter-reset: num-content var(--num);
  /* animation-delay: calc(var(--order) * 500ms); */
}

.counter::after {
  content: counter(num-content);
}
